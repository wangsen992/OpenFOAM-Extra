/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    location    "0";
    object      H2O.air;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField    #codeStream
{
				codeInclude
				#{
						#include "fvCFD.H"
				#};

				codeOptions
				#{
						-I${LIB_SRC}/finiteVolume/lnInclude \
						-I${LIB_SRC}/meshTools/lnInclude
				#};

				codeLibs
				#{
						-lmeshTools \
						-lfiniteVolume
				#};

				code
				#{
							const IOdictionary& d = static_cast<const IOdictionary&>(dict);
							const fvMesh& mesh = refCast<const fvMesh>(d.db());

							Info << "Running H2O init " << endl;

							scalarField val(mesh.nCells(), 0.);

							scalar valMax = 0.007;
							scalar pMax = 100000.0;
							scalar pMin = 90000.0;
							scalar z;
							scalar es;
							scalar p;
							scalar zmin = 0;
							scalar zmax = 1000;
							// T setup
							scalar dthetadz = 0.011;
							scalar T0 = 290;
							scalar cp = 1005;
							scalar g = 9.81;
							scalar N2 = g / T0 * dthetadz;
							scalar A = T0 - pow(g,2)/(cp * N2);
							scalar T;
							scalar Tc;

							forAll(val, i)
							{
									z = mesh.C()[i][2];
									p = pMax - (pMax - pMin) / (zmax - zmin) * z;
									T = A * exp(N2 / g * z) + pow(g,2) / (cp * N2);
									Tc = T - 273.13;
									es = 611 * exp(17.3 * Tc / (Tc + 237.3));

									val[i] = 0.622 * es / p * 0.995 * (1 + z/zmax * 0.016);
							}

							writeEntry(os, "", val);
				#};
};

boundaryField
{
    floor
    {
        type            zeroGradient;
    }

    ceiling
    {
        type            zeroGradient;
    }

    "(inlet|outlet|leftBoundary|rightBoundary)"
    {
        type            cyclic;
    }

		#includeEtc "caseDicts/setConstraintTypes"
		
}


// ************************************************************************* //
