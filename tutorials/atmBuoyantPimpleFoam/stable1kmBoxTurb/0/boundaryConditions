// Maintains a zeroPotentialTemperatureGradient at this boundary
TcodedFixedValue
{
        type            codedFixedValue;
				value						uniform 300;
				name						test_bc;
				codeInclude
				#{
				#include "fvCFD.H"
				#include "fluidAtmThermo.H"
				#};
				codeOptions
				#{
				-I$(LIB_SRC)/finiteVolume/lnInclude \
				-I$(LIB_SRC)/meshTools/lnInclude \
				-I$(LIB_SRC)/transportModels/lnInclude \
				-I$(LIB_SRC)/thermophysicalModels/basic/lnInclude \
				-I$(LIB_SRC)/thermophysicalModels/reactionThermo/lnInclude \
				-I$(LIB_SRC)/thermophysicalModels/specie/lnInclude \
				-I$(FOAM_USER_LIB_SRC)/atmosphericTurbulenceModels/lnInclude
				#};
				code
				#{
				const fluidAtmThermo& thermo
				(
					this->db().lookupObjectRef<fluidAtmThermo>("thermophysicalProperties")
				);

				label i = this->patch().index();
				tmp<scalarField> ttheta(thermo.theta().boundaryField()[i].patchInternalField());
				scalarField ptheta = ttheta();
				Info << "average(ptheta): " << average(ptheta) << endl;

				tmp<scalarField> tp(thermo.p().boundaryField()[i]);
				scalarField pp = tp();
				Info << "average(pp): " << average(pp) << endl;

				tmp<scalarField> tpoConst(thermo.poConst()->boundaryField()[i]);
				scalarField ppoConst = tpoConst();
				Info << "average(ppoconst): " << average(ppoConst) << endl;

				scalar p0(thermo.p0().value());

				scalarField pT = ptheta * pow((pp/p0), ppoConst);
				Info << "average(pT): " << average(pT) << endl;
				Info << "pT computed." << endl;
				operator==(pT);
				#};
};
